CREATE TABLE genero (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE puesto (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    salary INT NOT NULL
);

CREATE TABLE empleado (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    gender_id BIGINT NOT NULL,
    job_id BIGINT NOT NULL,
    name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    birthdate DATE NOT NULL,
    FOREIGN KEY (gender_id) REFERENCES genero(id),
    FOREIGN KEY (job_id) REFERENCES puesto(id)
);

CREATE TABLE horas_trabajadas (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    employee_id BIGINT NOT NULL,
    worked_hours INT NOT NULL,
    worked_date DATE NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES empleado(id)
);


--1. Procedimiento para agregar un nuevo empleado

CREATE PROCEDURE agregarEmpleado(
    IN p_gender_id BIGINT,
    IN p_job_id BIGINT,
    IN p_name VARCHAR(255),
    IN p_last_name VARCHAR(255),
    IN p_birthdate DATE,
    OUT p_id BIGINT,
    OUT p_success BOOLEAN
)
BEGIN
    DECLARE v_employee_count INT;
    DECLARE v_age INT;

    -- Validar que el nombre y apellido del empleado no existan
    SELECT COUNT(*) INTO v_employee_count 
    FROM empleado 
    WHERE name = p_name AND last_name = p_last_name;
    
    IF v_employee_count > 0 THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Validar que el empleado sea mayor de edad
    SET v_age = TIMESTAMPDIFF(YEAR, p_birthdate, CURDATE());
    
    IF v_age < 18 THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Validar que el género y puesto existan
    IF NOT EXISTS (SELECT 1 FROM genero WHERE id = p_gender_id) OR
       NOT EXISTS (SELECT 1 FROM puesto WHERE id = p_job_id) THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Insertar el nuevo empleado
    INSERT INTO empleado (gender_id, job_id, name, last_name, birthdate)
    VALUES (p_gender_id, p_job_id, p_name, p_last_name, p_birthdate);
    
    SET p_id = LAST_INSERT_ID();
    SET p_success = TRUE;
END 

--2. Procedimiento para agregar horas trabajadas de un empleado

CREATE PROCEDURE agregarHorasTrabajadas(
    IN p_employee_id BIGINT,
    IN p_worked_hours INT,
    IN p_worked_date DATE,
    OUT p_id BIGINT,
    OUT p_success BOOLEAN
)
BEGIN
    DECLARE v_employee_exists BOOLEAN;
    DECLARE v_hours_worked INT;

    -- Validar que el empleado exista
    SET v_employee_exists = EXISTS(SELECT 1 FROM empleado WHERE id = p_employee_id);
    
    IF NOT v_employee_exists THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Validar que el total de horas trabajadas no sea mayor a 20 horas
    IF p_worked_hours > 20 THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Validar que la fecha de trabajo sea menor o igual a la actual
    IF p_worked_date > CURDATE() THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Validar que no se duplique por empleado
    IF EXISTS (SELECT 1 FROM horas_trabajadas WHERE employee_id = p_employee_id AND worked_date = p_worked_date) THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Insertar horas trabajadas
    INSERT INTO horas_trabajadas (employee_id, worked_hours, worked_date)
    VALUES (p_employee_id, p_worked_hours, p_worked_date);
    
    SET p_id = LAST_INSERT_ID();
    SET p_success = TRUE;
END 

--3. Procedimiento para consultar empleados por puesto

CREATE PROCEDURE consultarEmpleadosPorPuesto(
    IN p_job_id BIGINT,
    OUT p_success BOOLEAN
)
BEGIN
    -- Validar que el puesto exista
    IF NOT EXISTS (SELECT 1 FROM puesto WHERE id = p_job_id) THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Consultar empleados por puesto
    SELECT e.id, e.name, e.last_name, e.birthdate, 
           p.id AS job_id, p.name AS job_name, p.salary AS job_salary,
           g.id AS gender_id, g.name AS gender_name
    FROM empleado e
    JOIN puesto p ON e.job_id = p.id
    JOIN genero g ON e.gender_id = g.id
    WHERE e.job_id = p_job_id;

    SET p_success = TRUE;
END 

--4. Procedimiento para consultar el total de horas trabajadas de un empleado por rango de fechas

CREATE PROCEDURE consultarHorasTrabajadas(
    IN p_employee_id BIGINT,
    IN p_start_date DATE,
    IN p_end_date DATE,
    OUT p_total_worked_hours INT,
    OUT p_success BOOLEAN
)
BEGIN
    DECLARE v_employee_exists BOOLEAN;

    -- Validar que el empleado exista
    SET v_employee_exists = EXISTS(SELECT 1 FROM empleado WHERE id = p_employee_id);
    
    IF NOT v_employee_exists THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Validar que la fecha de inicio sea menor a la fecha de fin
    IF p_start_date > p_end_date THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Consultar total de horas trabajadas
    SELECT SUM(worked_hours) INTO p_total_worked_hours
    FROM horas_trabajadas
    WHERE employee_id = p_employee_id
      AND worked_date BETWEEN p_start_date AND p_end_date;

    SET p_success = TRUE;
END 

--5. Procedimiento para consultar cuánto se le pagó a un empleado en un rango de fechas

CREATE PROCEDURE consultarPago(
    IN p_employee_id BIGINT,
    IN p_start_date DATE,
    IN p_end_date DATE,
    OUT p_payment INT,
    OUT p_success BOOLEAN
)
BEGIN
    DECLARE v_employee_exists BOOLEAN;
    DECLARE v_salary INT;

    -- Validar que el empleado exista
    SET v_employee_exists = EXISTS(SELECT 1 FROM empleado WHERE id = p_employee_id);
    
    IF NOT v_employee_exists THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Validar que la fecha de inicio sea menor a la fecha de fin
    IF p_start_date > p_end_date THEN
        SET p_success = FALSE;
        LEAVE proc;
    END IF;

    -- Obtener el salario del empleado
    SELECT p.salary INTO v_salary
    FROM empleado e
    JOIN puesto p ON e.job_id = p.id
    WHERE e.id = p_employee_id;

    -- Consultar total de horas trabajadas
    SELECT SUM(worked_hours) INTO p_payment
    FROM horas_trabajadas
    WHERE employee_id = p_employee_id
      AND worked_date BETWEEN p_start_date AND p_end_date;

    -- Calcular el pago
    SET p_payment = p_payment * v_salary;

    SET p_success = TRUE;
END

